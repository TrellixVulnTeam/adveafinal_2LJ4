{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators, FormControl } from '@angular/forms';\nlet HomeComponent = class HomeComponent {\n  constructor(apiservice, toastr, cookieservice, router, formBuilder) {\n    this.apiservice = apiservice;\n    this.toastr = toastr;\n    this.cookieservice = cookieservice;\n    this.router = router;\n    this.formBuilder = formBuilder;\n    this.responsemsg = {\n      Success: false,\n      Message: \"Please fill the required field and Items should not be empty!\"\n    };\n    this.submitted = false;\n    this.isFail = false;\n    this.isCdata = false;\n    this.isOdata = false;\n    this.isTdata = false;\n    this.isfdata = false;\n    this.submittedL = false;\n    this.serverfail = false;\n    this.dynamicArray = [];\n    this.ordertotal = 0;\n    this.newDynamic = {};\n    this.adveuser = this.cookieservice.get('User') === null ? \"hi\" : this.cookieservice.get('User');\n    this.authorizedorder = {\n      AuthorizationType: \"InvoicePayment\",\n      PaymentMethodId: 311,\n      PaymentMethodProductId: \"DirectInvoice\",\n      PaymentChannelId: 1\n    };\n    this.orderlinetotal = 0;\n    this.totalmoms = 0;\n    this.grandtotal = 0;\n    this.interfacedata = {\n      interfaceId: 5,\n      layoutName: \"Paynova_Responsive_2\",\n      customerLanguageCode: \"SWE\",\n      urlRedirectSuccess: \"https://paynova.optisoftab.se\",\n      urlRedirectCancel: \"https://paynova.optisoftab.se\",\n      urlRedirectPending: \"https://paynova.optisoftab.se\"\n    };\n    this.initializationdata = {\n      totalAmount: this.ordertotal,\n      paymentChannelId: 1,\n      paymentMethods: [{\n        id: 1\n      }],\n      interfaceOptions: this.interfacedata\n    };\n    this.CustomerForm = this.formBuilder.group({\n      UserName: new FormControl('', [Validators.required, Validators.minLength(12)]),\n      OrderDescription: new FormControl('', [Validators.required]),\n      Phone: new FormControl('', [Validators.required, Validators.minLength(13)]),\n      Email: new FormControl('', [Validators.email, Validators.required])\n    });\n  }\n\n  modelChanged(newObj, index) {\n    if (index == 0) this.orderlinetotal = 0;\n    this.orderlinetotal = Number(this.orderlinetotal) + Number(newObj.target.value);\n    this.totalmoms = Number(this.orderlinetotal * 0.25);\n    this.grandtotal = Number(this.orderlinetotal + this.totalmoms);\n  }\n\n  get desc() {\n    return this.CustomerForm.get('OrderDescription');\n  }\n\n  get phone() {\n    return this.CustomerForm.get('Phone');\n  }\n\n  get userNameL() {\n    return this.CustomerForm.get('UserName');\n  }\n\n  get email() {\n    return this.CustomerForm.get('Email');\n  }\n\n  addRow(index) {\n    this.newDynamic = {\n      articleNumber: \"\",\n      name: \"\",\n      qty: 1,\n      unitAmountExcludingTax: 0,\n      taxPercent: 25\n    };\n    this.dynamicArray.push(this.newDynamic);\n    this.toastr.success('New row added successfully', 'New Row');\n    console.log(this.dynamicArray);\n    return true;\n  }\n\n  deleteRow(index) {\n    if (this.dynamicArray.length == 1) {\n      this.toastr.error(\"Can't delete the row when there is only one row\", 'Warning');\n      return false;\n    } else {\n      this.orderlinetotal = Number(this.orderlinetotal) - Number(this.dynamicArray[index].unitAmountExcludingTax);\n      this.totalmoms = Number(this.orderlinetotal * 0.25);\n      this.grandtotal = Number(this.orderlinetotal + this.totalmoms);\n      this.dynamicArray.splice(index, 1);\n      this.toastr.warning('Row deleted successfully', 'Delete row');\n      return true;\n    }\n  }\n\n  ngOnInit() {\n    //if (this.adveuser != \"\") {\n    this.newDynamic = {\n      articleNumber: \"\",\n      name: \"\",\n      qty: 1,\n      unitAmountExcludingTax: 0,\n      taxPercent: 25\n    };\n    this.dynamicArray.push(this.newDynamic); //   }\n    //   else\n    //       this.router.navigate(['/login']);\n  }\n\n  onSubmit() {\n    var _a; // Process checkout data here\n\n\n    if (this.CustomerForm.valid) {\n      this.submitted = true;\n      this.apiservice.getcustomerdata((_a = this.CustomerForm.get('UserName')) === null || _a === void 0 ? void 0 : _a.value).subscribe(result => {\n        var _a, _b;\n\n        this.isCdata = result.status.isSuccess;\n        this.customerinfo = result;\n        this.customerinfo.name = result.addresses[0].name;\n        this.customerinfo.Address = result.addresses[0].address;\n        this.customerinfo.emailAddress = (_a = this.CustomerForm.get('Email')) === null || _a === void 0 ? void 0 : _a.value;\n        this.customerinfo.mobileTelephone = (_b = this.CustomerForm.get('Phone')) === null || _b === void 0 ? void 0 : _b.value;\n        this.clientData = this.CustomerForm.value;\n        this.clientData.Customer = this.customerinfo;\n        this.clientData.Address = this.customerinfo.Address;\n        this.clientData.OrderLines = this.dynamicArray;\n        this.apiservice.generatepaynovadata(this.clientData).subscribe(results => {\n          this.ordertotal = results.totalAmount;\n          this.apiservice.paynovacreateorder(results).subscribe(res => {\n            if (res.status.isSuccess) {\n              this.toastr.success(res.orderId, 'New order has been created successfully!');\n              this.isOdata = res.status.isSuccess;\n              this.orderid = res.orderId;\n              this.authorizedorder.TotalAmount = this.ordertotal;\n              console.log(this.authorizedorder);\n              this.apiservice.authorizeorder(res.orderId, this.authorizedorder).subscribe(auth => {\n                if (auth.status.isSuccess) {\n                  this.isTdata = true;\n                  this.transactionid = auth.transactionId;\n                  this.riskstatement = auth.riskAssessment.result;\n                  this.toastr.success(auth.status.statusMessage, 'Authorized Message');\n                } else {\n                  this.isTdata = false;\n                  this.transactionerror = auth.status.statusMessage;\n                  this.toastr.error(auth.status.statusMessage, 'Authorization Failed!');\n                }\n              });\n            } else {\n              this.toastr.success(res.status.statusMessage, 'Order Creation Failed!');\n              this.responsemsg.Message = \"Please make sure order line data is not empty!\";\n            }\n          });\n          this.isFail = false;\n        });\n      });\n    } else {\n      this.isFail = true;\n    }\n  }\n\n  onFinal() {\n    if (this.isTdata) {\n      this.apiservice.finalizeorder(this.orderid, this.transactionid, this.ordertotal).subscribe(final => {\n        this.response = final.status.statusMessage;\n        this.isfdata = true;\n\n        if (final.status.isSuccess) {\n          this.toastr.success(this.response, 'Finalize Successfull!');\n        } else {\n          this.toastr.error(this.response, 'Finalize Failed!');\n        }\n      });\n    }\n  }\n\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);\nexport { HomeComponent };","map":null,"metadata":{},"sourceType":"module"}